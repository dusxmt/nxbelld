.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "NXBELLD 1"
.TH NXBELLD 1 "2017-11-05" "nxbelld 0.1.1-dev" "User Commands"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
nxbelld \- X daemon that performs an action every time the bell is rung
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "\fBnxbelld\fR\ [\fB\-bDTiCq\fR]\ [\fB\-t\fR\ \fIdelay\fR]\ [\fB\-F\fR\ \fIfreq\fR]\ [\fB\-v\fR\ \fIvol\fR]\ [\fB\-d\fR\ \fIduration\fR]" 4
.IX Item "nxbelld[-bDTiCq][-tdelay][-Ffreq][-vvol][-dduration]"
.PD 0
.IP "\fBnxbelld\fR\ [\fB\-bDTc\fR]\ [\fB\-t\fR\ \fIdelay\fR]\ \fB\-f\fR\ \fIfile\fR" 4
.IX Item "nxbelld[-bDTc][-tdelay]-ffile"
.IP "\fBnxbelld\fR\ [\fB\-bDT\fR]\ [\fB\-t\fR\ \fIdelay\fR]\ \fB\-e\fR\ \fIcmd\fR" 4
.IX Item "nxbelld[-bDT][-tdelay]-ecmd"
.IP "\fBnxbelld\fR\ \fB\-?\fR" 4
.IX Item "nxbelld-?"
.PD
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBnxbelld\fR is a tiny utility to aid people who either don't like the default
\&\s-1PC\s0 speaker beep, or use a sound driver that doesn't have support for the
\&\s-1PC\s0 speaker (e.g. the \s-1AD1981\s0 chipset in the snd_hda_intel \s-1ALSA\s0 driver, as
of 2008\-04\-06).
.PP
\&\fBnxbelld\fR performs a given action every time the X bell is rung.  The
actions \fBnxbelld\fR can currently perform include running a specified program,
emulating the \s-1PC\s0 speaker beep using your sound card (default), or
playing a \s-1PCM\s0 encoded \s-1WAVE\s0 file.
.PP
The actions involving the sound card are only available if \fBnxbelld\fR is
compiled with sound support, which requires a supported sound \s-1API.\s0
.PP
Currently, the following sound APIs are supported:
.IP "\(bu" 4
\&\s-1ALSA \s0(default on most Linux distributions)
.IP "\(bu" 4
\&\s-1OSS \s0(default on several \s-1BSD\s0 systems, including FreeBSD)
.IP "\(bu" 4
soundio (default on OpenBSD)
.PP
To convert your favorite sound files to a \s-1PCM\s0 encoded \s-1WAVE\s0 file, use:
.PP
.Vb 1
\&    ffmpeg \-i <file> \-vn \-acodec pcm_s16le out.wav
.Ve
.PP
\&\fBnxbelld\fR can also throttle the bell if it is rung too often (e.g. some
terminal program goes crazy), and/or disable the system's audible bell
(so that you don't get the annoying \s-1PC\s0 speaker beep in addition to your
\&\fBnxbelld\fR action).
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Common Options"
.IX Subsection "Common Options"
.IP "\fB\-b,\fR \fB\-\-background\fR" 4
.IX Item "-b, --background"
Run \fBnxbelld\fR in the background.
.IP "\fB\-D,\fR \fB\-\-keep\-abell\fR" 4
.IX Item "-D, --keep-abell"
Don't disable the system audio bell on startup.  The default is to disable
the audio bell; that way, if you have a working \s-1PC\s0 speaker, you won't hear
two beeps.  You can always enable / disable the bell using \fIxset\fR\|(1).
.IP "\fB\-t,\fR \fB\-\-throttle\fR \fIinterval\fR" 4
.IX Item "-t, --throttle interval"
Interval (ms) during which subsequent bells are throttled.
.IP "\fB\-T,\fR \fB\-\-test\-bell\fR" 4
.IX Item "-T, --test-bell"
Ring a test bell on startup.  If you're experimenting with your \s-1PC\s0 speaker
values, then you can try something like:
.Sp
.Vb 1
\&    pkill nxbelld; nxbelld \-TF1000 \-v100 \-d200 &
.Ve
.Sp
and play with the numbers until you're satisfied with the sound.
.IP "\fB\-?,\fR \fB\-\-help\fR" 4
.IX Item "-?, --help"
Print the help screen and exit.
.SS "Options to play an audio file"
.IX Subsection "Options to play an audio file"
.IP "\fB\-c,\fR \fB\-\-cache\fR" 4
.IX Item "-c, --cache"
Cache the audio file in memory (less lag, especially when the disk is busy).
.IP "\fB\-f\fR \fB\-\-wave\-file\fR \fIfile\fR" 4
.IX Item "-f --wave-file file"
Name of the file to play when the bell is rung.  The file must be a \s-1PCM\s0 encoded
wave file.
.SS "Options to produce a beep"
.IX Subsection "Options to produce a beep"
.IP "\fB\-i,\fR \fB\-\-sine\fR" 4
.IX Item "-i, --sine"
Generate a sine wave beep.
.IP "\fB\-C,\fR \fB\-\-complex\fR" 4
.IX Item "-C, --complex"
Generate a more complex waveform beep, with a few higher harmonics.
.Sp
The result is a nice compromise between the too-piercing sine wave and the
too-harsh square wave.
.IP "\fB\-q,\fR \fB\-\-square\fR" 4
.IX Item "-q, --square"
Generate a square wave beep.
.PP
The default values of the following three options are from the bell
parameters of the server.  (These can be set via \fIxset\fR\|(1) for instance).
.PP
These options are only read on startup, and not every time the bell is
played, so if you change your bell parameters, you should restart nxbelld
for the change to take effect.
.IP "\fB\-d,\fR \fB\-\-duration\fR" 4
.IX Item "-d, --duration"
Duration of the beep in milliseconds.
.IP "\fB\-F,\fR \fB\-\-frequency\fR" 4
.IX Item "-F, --frequency"
Frequency of the beep in hertz.
.IP "\fB\-v,\fR \fB\-\-volume\fR" 4
.IX Item "-v, --volume"
Volume of the beep (0 \*(-- 100).
.SS "Options to execute an external command"
.IX Subsection "Options to execute an external command"
.IP "\fB\-e,\fR \fB\-\-command\fR \fIcmd\fR" 4
.IX Item "-e, --command cmd"
Command to execute when the bell is rung.
.SH "COMPATIBILITY WITH GAUTAM IYER'S XBELLD"
.IX Header "COMPATIBILITY WITH GAUTAM IYER'S XBELLD"
\&\fBnxbelld\fR should mostly be backwards compatible with xbelld, with the only
exception being the \fB\-e\fR (\fB\-\-command\fR) option.  In Gautam Iyer's xbelld,
it has to be the last option, and all following command line arguments are
considered to be the external command to execute once the bell is rung.
.PP
\&\fBnxbelld\fR accepts a single string argument for the \fB\-\-command\fR option, and
doesn't impose a limitation on where it has to be on the command line.
This means that if the external command consists of several
whitespace-separated words, it has to be quoted and properly escaped.
.SH "BUGS"
.IX Header "BUGS"
When using soundio, the beeps are slightly shorter than the specified beep
duration.  Beeps of 120 ms or shorter don't get played at all.  This can be
worked around simply by specifying a longer duration using the \fB\-\-duration\fR
option.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Project site: <https://github.com/dusxmt/nxbelld>
.PP
Project site of the original xbelld: <https://gitlab.com/gi1242/xbelld>
.SH "AUTHORS"
.IX Header "AUTHORS"
Gautam Iyer <gi1242@users.sourceforge.net>
.PP
Marek Benc <dusxmt@gmx.com>
